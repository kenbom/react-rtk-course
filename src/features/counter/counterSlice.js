import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';

export const taskSlice = taskSlice({
  name: 'task',
  initialState: {
    idCount:3,
    tasks: [
      { id: 1, title: titleA, completed: false, },
      { id: 2, title: titleB, completed: true, },
      { id: 3, title: titleC, completed: false, },
    ]
  }
  reducers: {
    newTask: (state, action) => {
     state.idCount ++;
     const newItem ={
       id: state.idCount,
       title: action.payload,
       completed: false
     }
     state.tasks = [newItem, ...state.tasks]
    },
    deleteTask: (state, action) => {
      state.tasks = state.filter((t)= t.id!== action.payload.id);
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    completeTask: (state, action) => {
      const task = state.tasks.find((t) => t.id === action.payload.id)
      if(task){
        task.completed !== task.completed
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
